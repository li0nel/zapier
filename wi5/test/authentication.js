/* globals describe, it */
require('should');
const zapier = require('zapier-platform-core');
zapier.tools.env.inject();

const App = require('../index');
const appTester = zapier.createAppTester(App);
const nock = require('nock');

const sample_token = require('../samples/token')
const sample_refresh_token = require('../samples/refresh_token')
const sample_user_info = require('../samples/user_info')

describe('oauth2 app', () => {
  it('generates an authorize URL', () => {
    const oauth_redirect_uri = 'https://random.com';
    const bundle = {
      // In production, these will be generated by Zapier and set automatically
      inputData: {
        state: '4444',
        redirect_uri: oauth_redirect_uri
      }
    };

    return appTester(App.authentication.oauth2Config.authorizeUrl, bundle).then(
      authorizeUrl => {
        authorizeUrl.should.be.exactly(`https://${process.env.AUTH0_DOMAIN}/authorize?client_id=${process.env.AUTH0_CLIENT_ID}&client_secret=${process.env.AUTH0_CLIENT_SECRET}&state=4444&redirect_uri=${encodeURIComponent(oauth_redirect_uri)}&response_type=code&scope=openid%20email%20offline_access&audience=${encodeURIComponent(process.env.AUTH0_AUDIENCE)}`)
      }
    );
  });

  it('can fetch an access token', () => {
    const oauth_redirect_uri = 'https://random.com';
    const bundle = {
      // In production, these will be generated by Zapier and set automatically
      inputData: {
        code: '4444',
        redirect_uri: oauth_redirect_uri
      }
    };

    const scope = nock(/example\.com/)
      .post('/oauth/token')
      .reply(200, sample_token);
    
    return appTester(App.authentication.oauth2Config.getAccessToken, bundle).then(
      token => {
        token.should.have.ownProperty('access_token');
      }
    );
  });

  it('can refresh the access token', () => {
    const bundle = {
      authData: {
        access_token: 'a_token',
        refresh_token: 'a_refresh_token'
      }
    };

    const scope = nock(/example\.com/)
      .post('/oauth/token')
      .reply(200, sample_refresh_token);

    return appTester(App.authentication.oauth2Config.refreshAccessToken, bundle).then(
      token => {
        token.should.have.ownProperty('access_token')
      });
    });

  it('includes the access token in future requests', () => {
    const bundle = {
      authData: {
        access_token: 'a_token',
        refresh_token: 'a_refresh_token'
      }
    };
    
    const scope = nock(/example\.com/)
      .get('/userinfo')
      .reply(200, sample_user_info);

    return appTester(App.authentication.test, bundle).then(
      result => {
        result.should.have.property('sub');
        result.should.have.property('email');
      }
    );
  });
});
